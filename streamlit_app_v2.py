import streamlit as st
import openai
import requests
from bs4 import BeautifulSoup

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API-–∫–ª—é—á–∞ OpenAI
openai.api_key = st.secrets["OPENAI_API_KEY"]

st.set_page_config(page_title="–ò–ò-–ø—Ä–µ—Å–∫–æ—Ä–∏–Ω–≥ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", layout="centered")
st.title("üîç –ò–ò-–ø—Ä–µ—Å–∫–æ—Ä–∏–Ω–≥ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")

st.markdown("–í–≤–µ–¥–∏—Ç–µ **–Ω–µ—Å–∫–æ–ª—å–∫–æ** —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–µ–∑—é–º–µ –∏ –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é —Å hh.ru")

resume_urls = st.text_area("–°—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–∑—é–º–µ (–ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ)").strip().split("\n")
vacancy_url = st.text_input("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é:")

if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"):
    if not resume_urls or not vacancy_url:
        st.error("‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é.")
        st.stop()

    def extract_text_from_hh(url):
        try:
            headers = {"User-Agent": "Mozilla/5.0"}
            response = requests.get(url, headers=headers)
            soup = BeautifulSoup(response.text, 'html.parser')
            text = soup.get_text(separator='\n')
            return text.strip()
        except Exception as e:
            return f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏: {e}]"

    with st.spinner("üîé –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü hh.ru..."):
        resumes = [extract_text_from_hh(url) for url in resume_urls if url.strip()]
        vacancy = extract_text_from_hh(vacancy_url)

    with st.spinner("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ GPT-4.1..."):
        prompt = f"""
–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥–±–æ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∞. –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è –∏ —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –≤–∞–∫–∞–Ω—Å–∏—é –∏ –ø–æ—á–µ–º—É.
–î–∞–π –∫—Ä–∞—Ç–∫—É—é —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ –∫–ª—é—á–µ–≤—ã–º –Ω–∞–≤—ã–∫–∞–º –∏ –æ–ø—ã—Ç–∞–º, –≤—ã–¥–µ–ª–∏ —Å–∏–ª—å–Ω—ã–µ/—Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã.
–í –∫–æ–Ω—Ü–µ —Å–¥–µ–ª–∞–π –∑–∞–∫–ª—é—á–µ–Ω–∏–µ: –∫–æ–≥–æ –±—ã —Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å.

–í–∞–∫–∞–Ω—Å–∏—è:
=====
{vacancy}

–†–µ–∑—é–º–µ:
"""
        for i, resume in enumerate(resumes, 1):
            prompt += f"\n---\n–ö–∞–Ω–¥–∏–¥–∞—Ç {i}:\n{resume}\n"

        response = openai.chat.completions.create(
            model="gpt-4-1106-preview",  # GPT-4.1
            messages=[
                {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π HR-–∞–Ω–∞–ª–∏—Ç–∏–∫."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3
        )
        result = response.choices[0].message.content

    st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")
    st.markdown("### üß† –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
    st.markdown(result)
